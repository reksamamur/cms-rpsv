/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as CanvasidIndexImport } from './routes/$canvasid/index'
import { Route as CanvasidEditorImport } from './routes/$canvasid/editor'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const CanvasidIndexRoute = CanvasidIndexImport.update({
  id: '/$canvasid/',
  path: '/$canvasid/',
  getParentRoute: () => rootRoute,
} as any)

const CanvasidEditorRoute = CanvasidEditorImport.update({
  id: '/$canvasid/editor',
  path: '/$canvasid/editor',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$canvasid/editor': {
      id: '/$canvasid/editor'
      path: '/$canvasid/editor'
      fullPath: '/$canvasid/editor'
      preLoaderRoute: typeof CanvasidEditorImport
      parentRoute: typeof rootRoute
    }
    '/$canvasid/': {
      id: '/$canvasid/'
      path: '/$canvasid'
      fullPath: '/$canvasid'
      preLoaderRoute: typeof CanvasidIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$canvasid/editor': typeof CanvasidEditorRoute
  '/$canvasid': typeof CanvasidIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$canvasid/editor': typeof CanvasidEditorRoute
  '/$canvasid': typeof CanvasidIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$canvasid/editor': typeof CanvasidEditorRoute
  '/$canvasid/': typeof CanvasidIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/$canvasid/editor' | '/$canvasid'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/$canvasid/editor' | '/$canvasid'
  id: '__root__' | '/' | '/$canvasid/editor' | '/$canvasid/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CanvasidEditorRoute: typeof CanvasidEditorRoute
  CanvasidIndexRoute: typeof CanvasidIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CanvasidEditorRoute: CanvasidEditorRoute,
  CanvasidIndexRoute: CanvasidIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$canvasid/editor",
        "/$canvasid/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$canvasid/editor": {
      "filePath": "$canvasid/editor.tsx"
    },
    "/$canvasid/": {
      "filePath": "$canvasid/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
